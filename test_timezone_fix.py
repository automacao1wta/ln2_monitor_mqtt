#!/usr/bin/env python3
"""
Teste completo de timezone UTC para sistema de notifica√ß√µes
Valida que todas as l√≥gicas de tempo est√£o usando UTC corretamente
"""

import sys
import os
import time
from datetime import datetime, timezone, timedelta
from unittest.mock import Mock, patch

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_timezone_consistency():
    """Testa se todas as fun√ß√µes de tempo est√£o usando UTC consistentemente"""
    print("üîç Testando consist√™ncia de timezone UTC...")
    
    # Verificar imports necess√°rios
    try:
        from notification_handler import NotificationHandler, NotificationConfig
        from message_processor import MessageProcessor
        print("‚úÖ Imports realizados com sucesso")
    except Exception as e:
        print(f"‚ùå Erro no import: {e}")
        return
    
    # Simular timezone n√£o-UTC para testar se o c√≥digo est√° realmente usando UTC
    print("\nüìç Timezone local atual:", datetime.now().astimezone().tzinfo)
    print("üìç Timezone UTC:", datetime.now(timezone.utc).tzinfo)
    
    # Calcular diferen√ßa entre local e UTC
    local_now = datetime.now()
    utc_now = datetime.now(timezone.utc)
    local_timestamp = int(local_now.timestamp())
    utc_timestamp = int(utc_now.timestamp())
    
    print(f"üìä Timestamp local: {local_timestamp}")
    print(f"üìä Timestamp UTC:   {utc_timestamp}")
    print(f"üìä Diferen√ßa: {abs(local_timestamp - utc_timestamp)} segundos")
    
    if abs(local_timestamp - utc_timestamp) > 1:
        print("‚ö†Ô∏è  Sistema tem diferen√ßa de timezone significativa - perfeito para teste!")
    else:
        print("‚ÑπÔ∏è  Sistema em UTC ou timezone pr√≥ximo - teste ainda v√°lido")
    
    # Teste 1: Rate limiting de notifica√ß√µes
    print("\nüß™ Teste 1: Rate limiting de notifica√ß√µes")
    test_rate_limiting()
    
    # Teste 2: Compara√ß√£o de lastTX 
    print("\nüß™ Teste 2: Compara√ß√£o de lastTX")
    test_lasttx_comparison()
    
    # Teste 3: Agrupamento de notifica√ß√µes
    print("\nüß™ Teste 3: Agrupamento de notifica√ß√µes")
    test_notification_grouping()
    
    print("\n‚úÖ Todos os testes de timezone conclu√≠dos!")

def test_rate_limiting():
    """Testa se o rate limiting est√° usando UTC consistentemente"""
    try:
        # Simular timestamps de notifica√ß√µes em diferentes timezones
        utc_now = datetime.now(timezone.utc)
        
        # Timestamp de 30 minutos atr√°s (deveria estar dentro do limite de 1 hora)
        thirty_min_ago = utc_now - timedelta(minutes=30)
        
        # Timestamp de 2 horas atr√°s (deveria estar fora do limite de 1 hora)
        two_hours_ago = utc_now - timedelta(hours=2)
        
        print(f"   Agora UTC: {utc_now}")
        print(f"   30min atr√°s: {thirty_min_ago}")
        print(f"   2h atr√°s: {two_hours_ago}")
        
        # Simular diferen√ßa com timezone local vs UTC
        hour_ago_utc = utc_now - timedelta(hours=1)
        time_diff_seconds = (utc_now - thirty_min_ago).total_seconds()
        time_diff_hours = time_diff_seconds / 3600
        
        print(f"   ‚è∞ Diferen√ßa de 30min em horas: {time_diff_hours:.2f}")
        print(f"   ‚è∞ Deveria ser ~0.5 horas: {'‚úÖ' if 0.4 <= time_diff_hours <= 0.6 else '‚ùå'}")
        
        # Teste com timestamp antigo
        time_diff_old = (utc_now - two_hours_ago).total_seconds() / 3600
        print(f"   ‚è∞ Diferen√ßa de 2h em horas: {time_diff_old:.2f}")
        print(f"   ‚è∞ Deveria ser ~2.0 horas: {'‚úÖ' if 1.9 <= time_diff_old <= 2.1 else '‚ùå'}")
        
    except Exception as e:
        print(f"‚ùå Erro no teste de rate limiting: {e}")

def test_lasttx_comparison():
    """Testa compara√ß√£o de lastTX com timezone UTC"""
    try:
        # Simular lastTX epoch timestamp (sempre em UTC)
        utc_now = datetime.now(timezone.utc)
        last_tx_epoch = int(utc_now.timestamp()) - 3600  # 1 hora atr√°s
        
        # Converter lastTX para datetime UTC (m√©todo correto)
        last_tx_time_utc = datetime.fromtimestamp(last_tx_epoch, tz=timezone.utc)
        current_time_utc = datetime.now(timezone.utc)
        
        time_diff_hours = (current_time_utc - last_tx_time_utc).total_seconds() / 3600
        
        print(f"   LastTX epoch: {last_tx_epoch}")
        print(f"   LastTX UTC: {last_tx_time_utc}")
        print(f"   Current UTC: {current_time_utc}")
        print(f"   ‚è∞ Diferen√ßa: {time_diff_hours:.2f} horas")
        print(f"   ‚è∞ Deveria ser ~1.0 hora: {'‚úÖ' if 0.9 <= time_diff_hours <= 1.1 else '‚ùå'}")
        
        # Teste de threshold de conex√£o (1 hora por padr√£o)
        connection_timeout_hours = 1.0
        is_connected = time_diff_hours <= connection_timeout_hours
        print(f"   üîó Dispositivo conectado: {'‚úÖ' if is_connected else '‚ùå'}")
        
    except Exception as e:
        print(f"‚ùå Erro no teste de lastTX: {e}")

def test_notification_grouping():
    """Testa agrupamento de notifica√ß√µes com timestamps UTC"""
    try:
        utc_now = datetime.now(timezone.utc)
        
        # Simular notifica√ß√µes criadas em momentos diferentes
        notification_1 = {
            'type': 'status_change',
            'created_at': utc_now - timedelta(seconds=45)  # 45 segundos atr√°s
        }
        
        notification_2 = {
            'type': 'status_change', 
            'created_at': utc_now - timedelta(seconds=10)  # 10 segundos atr√°s
        }
        
        # Simular l√≥gica de agrupamento (delay m√°ximo de 30 segundos)
        max_group_delay_seconds = 30
        oldest_time = min(notification_1['created_at'], notification_2['created_at'])
        time_since_oldest = (utc_now - oldest_time).total_seconds()
        
        print(f"   Notifica√ß√£o 1: {notification_1['created_at']}")
        print(f"   Notifica√ß√£o 2: {notification_2['created_at']}")
        print(f"   Mais antiga: {oldest_time}")
        print(f"   ‚è∞ Tempo desde mais antiga: {time_since_oldest:.1f} segundos")
        print(f"   ‚è∞ Delay m√°ximo: {max_group_delay_seconds} segundos")
        
        should_send = time_since_oldest >= max_group_delay_seconds
        print(f"   üì§ Deveria enviar agora: {'‚úÖ' if should_send else '‚ùå'}")
        
    except Exception as e:
        print(f"‚ùå Erro no teste de agrupamento: {e}")

def test_edge_cases():
    """Testa casos extremos de timezone"""
    print("\nüß™ Teste 4: Casos extremos")
    
    try:
        # Teste com mudan√ßa de hor√°rio de ver√£o
        utc_now = datetime.now(timezone.utc)
        
        # Simular timestamp pr√≥ximo a mudan√ßa de hor√°rio (pode variar por regi√£o)
        print(f"   UTC atual: {utc_now}")
        print(f"   Local atual: {datetime.now()}")
        
        # Verificar se as fun√ß√µes s√£o consistentes
        epoch_1 = int(utc_now.timestamp())
        time.sleep(0.1)  # Pequena pausa
        epoch_2 = int(datetime.now(timezone.utc).timestamp())
        
        diff = abs(epoch_2 - epoch_1)
        print(f"   ‚è∞ Diferen√ßa entre dois UTC calls: {diff} segundos")
        print(f"   ‚è∞ Deveria ser ‚â§ 1 segundo: {'‚úÖ' if diff <= 1 else '‚ùå'}")
        
    except Exception as e:
        print(f"‚ùå Erro no teste de casos extremos: {e}")

if __name__ == "__main__":
    test_timezone_consistency()
    test_edge_cases()
